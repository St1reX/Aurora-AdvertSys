// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AuroraDbContext))]
    partial class AuroraDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Advert", b =>
                {
                    b.Property<int>("AdvertID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertID"));

                    b.Property<int>("AdvertAddressID")
                        .HasColumnType("int");

                    b.Property<string>("AdvertDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ApplicationAmount")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CVMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("ContractTypeID")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentTypeID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int>("ExposuresAmount")
                        .HasColumnType("int");

                    b.Property<int>("JobSectorID")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxSalary")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("MinSalary")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<int>("SeniorityLevelID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkDaysID")
                        .HasColumnType("int");

                    b.Property<int>("WorkModelID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("WorkTimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WorkTimeTo")
                        .HasColumnType("time");

                    b.HasKey("AdvertID");

                    b.HasIndex("AdvertAddressID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ContractTypeID");

                    b.HasIndex("EmploymentTypeID");

                    b.HasIndex("JobSectorID");

                    b.HasIndex("PositionID");

                    b.HasIndex("SeniorityLevelID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkDaysID");

                    b.HasIndex("WorkModelID");

                    b.ToTable("Advert");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.AdvertApplication", b =>
                {
                    b.Property<int>("AdvertApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertApplicationID"));

                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdvertApplicationID");

                    b.HasIndex("AdvertID");

                    b.HasIndex("UserID");

                    b.ToTable("AdvertApplication");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.AdvertDuty", b =>
                {
                    b.Property<int>("AdvertDutyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertDutyID"));

                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<int>("DutyID")
                        .HasColumnType("int");

                    b.HasKey("AdvertDutyID");

                    b.HasIndex("AdvertID");

                    b.HasIndex("DutyID");

                    b.ToTable("AdvertDuty");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.Benefit", b =>
                {
                    b.Property<int>("BenefitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitID"));

                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<string>("BenefitDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BenefitID");

                    b.HasIndex("AdvertID");

                    b.ToTable("Benefit");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.ContractType", b =>
                {
                    b.Property<int>("ContractTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTypeID"));

                    b.Property<string>("ContractTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContractTypeID");

                    b.ToTable("ContractType");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploymentTypeID"));

                    b.Property<string>("EmploymentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmploymentTypeID");

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.JobSector", b =>
                {
                    b.Property<int>("JobSectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobSectorID"));

                    b.Property<string>("JobSectorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobSectorID");

                    b.ToTable("JobSector");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.Requirment", b =>
                {
                    b.Property<int>("RequirmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirmentID"));

                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<string>("RequirmentDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequirmentID");

                    b.HasIndex("AdvertID");

                    b.ToTable("Requirment");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.SeniorityLevel", b =>
                {
                    b.Property<int>("SeniorityLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeniorityLevelID"));

                    b.Property<string>("SeniorityLevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SeniorityLevelID");

                    b.ToTable("SeniorityLevel");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.WorkDays", b =>
                {
                    b.Property<int>("WorkDaysID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkDaysID"));

                    b.Property<string>("WorkDaysName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WorkDaysID");

                    b.ToTable("WorkDays");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.WorkModel", b =>
                {
                    b.Property<int>("WorkModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkModelID"));

                    b.Property<string>("WorkModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WorkModelID");

                    b.ToTable("WorkModel");
                });

            modelBuilder.Entity("Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CVPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PositionID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserAddressID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkSummary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionID");

                    b.HasIndex("UserAddressID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Shared.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("decimal(8,6)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Entities.Shared.Company.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<int>("CompanyAddressID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.HasIndex("CompanyAddressID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Core.Entities.Shared.Duty", b =>
                {
                    b.Property<int>("DutyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DutyID"));

                    b.Property<string>("DutyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DutyID");

                    b.ToTable("Duty");
                });

            modelBuilder.Entity("Core.Entities.Shared.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionID"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PositionID");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Education.Education", b =>
                {
                    b.Property<int>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("EducationLevelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EducationID");

                    b.HasIndex("EducationLevelID");

                    b.HasIndex("UserID");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Education.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationLevelID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EducationLevelID");

                    b.ToTable("EducationLevel");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Experience.Experience", b =>
                {
                    b.Property<int>("ExperienceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceID"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExperienceID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PositionID");

                    b.HasIndex("UserID");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Experience.ExperienceDuty", b =>
                {
                    b.Property<int>("ExperienceDutyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceDutyID"));

                    b.Property<int>("DutyID")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceID")
                        .HasColumnType("int");

                    b.HasKey("ExperienceDutyID");

                    b.HasIndex("DutyID");

                    b.HasIndex("ExperienceID");

                    b.ToTable("ExperienceDuty");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Language.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageID"));

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("LanguageID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Language.LanguageLevel", b =>
                {
                    b.Property<int>("LanguageLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageLevelID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("LanguageLevelID");

                    b.ToTable("LanguageLevel");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Language.UserLanguage", b =>
                {
                    b.Property<int>("UserLanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLanguageID"));

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageLevelID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserLanguageID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("LanguageLevelID");

                    b.HasIndex("UserID");

                    b.ToTable("UserLanguage");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Link", b =>
                {
                    b.Property<int>("LinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkID"));

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LinkID");

                    b.HasIndex("UserID");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Skill.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillID"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SkillID");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Skill.UserSkill", b =>
                {
                    b.Property<int>("UserSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSkillID"));

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserSkillID");

                    b.HasIndex("SkillID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSkill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Advert", b =>
                {
                    b.HasOne("Core.Entities.Shared.Address", "AdvertAddress")
                        .WithMany("Adverts")
                        .HasForeignKey("AdvertAddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany("Adverts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Core.Entities.Shared.Company.Company", "Company")
                        .WithMany("Adverts")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdvertDependent.ContractType", "ContractType")
                        .WithMany("Adverts")
                        .HasForeignKey("ContractTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdvertDependent.EmploymentType", "EmploymentType")
                        .WithMany("Adverts")
                        .HasForeignKey("EmploymentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdvertDependent.JobSector", "JobSector")
                        .WithMany("Adverts")
                        .HasForeignKey("JobSectorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Shared.Position", "Position")
                        .WithMany("Adverts")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdvertDependent.SeniorityLevel", "SeniorityLevel")
                        .WithMany("Adverts")
                        .HasForeignKey("SeniorityLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.AdvertDependent.WorkDays", "WorkDays")
                        .WithMany("Adverts")
                        .HasForeignKey("WorkDaysID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdvertDependent.WorkModel", "WorkModel")
                        .WithMany("Adverts")
                        .HasForeignKey("WorkModelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvertAddress");

                    b.Navigation("Company");

                    b.Navigation("ContractType");

                    b.Navigation("EmploymentType");

                    b.Navigation("JobSector");

                    b.Navigation("Position");

                    b.Navigation("SeniorityLevel");

                    b.Navigation("User");

                    b.Navigation("WorkDays");

                    b.Navigation("WorkModel");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.AdvertApplication", b =>
                {
                    b.HasOne("Core.Entities.Advert", "Advert")
                        .WithMany("AdvertApplications")
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("AdvertApplications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.AdvertDuty", b =>
                {
                    b.HasOne("Core.Entities.Advert", "Advert")
                        .WithMany("AdvertDuties")
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Shared.Duty", "Duty")
                        .WithMany("AdvertDuties")
                        .HasForeignKey("DutyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Duty");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.Benefit", b =>
                {
                    b.HasOne("Core.Entities.Advert", "Advert")
                        .WithMany("Benefits")
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.Requirment", b =>
                {
                    b.HasOne("Core.Entities.Advert", "Advert")
                        .WithMany("Requirments")
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Core.Entities.Shared.Company.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyID");

                    b.HasOne("Core.Entities.Shared.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionID");

                    b.HasOne("Core.Entities.Shared.Address", "UserAddress")
                        .WithMany("Users")
                        .HasForeignKey("UserAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Position");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("Core.Entities.Shared.Company.Company", b =>
                {
                    b.HasOne("Core.Entities.Shared.Address", "CompanyAddress")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyAddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Course", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Education.Education", b =>
                {
                    b.HasOne("Core.Entities.UserDependent.Education.EducationLevel", "EducationLevel")
                        .WithMany("Educations")
                        .HasForeignKey("EducationLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Experience.Experience", b =>
                {
                    b.HasOne("Core.Entities.Shared.Company.Company", "Company")
                        .WithMany("Experiences")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Shared.Position", "Position")
                        .WithMany("Experiences")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Experience.ExperienceDuty", b =>
                {
                    b.HasOne("Core.Entities.Shared.Duty", "Duty")
                        .WithMany("ExperienceDuties")
                        .HasForeignKey("DutyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserDependent.Experience.Experience", "Experience")
                        .WithMany("ExperienceDuties")
                        .HasForeignKey("ExperienceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duty");

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Language.UserLanguage", b =>
                {
                    b.HasOne("Core.Entities.UserDependent.Language.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserDependent.Language.LanguageLevel", "LanguageLevel")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Link", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("Links")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Skill.UserSkill", b =>
                {
                    b.HasOne("Core.Entities.UserDependent.Skill.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Advert", b =>
                {
                    b.Navigation("AdvertApplications");

                    b.Navigation("AdvertDuties");

                    b.Navigation("Benefits");

                    b.Navigation("Requirments");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.ContractType", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.EmploymentType", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.JobSector", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.SeniorityLevel", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.WorkDays", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("Core.Entities.AdvertDependent.WorkModel", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AdvertApplications");

                    b.Navigation("Adverts");

                    b.Navigation("Courses");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Links");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Core.Entities.Shared.Address", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("Companies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Shared.Company.Company", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("Experiences");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Shared.Duty", b =>
                {
                    b.Navigation("AdvertDuties");

                    b.Navigation("ExperienceDuties");
                });

            modelBuilder.Entity("Core.Entities.Shared.Position", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("Experiences");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Education.EducationLevel", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Experience.Experience", b =>
                {
                    b.Navigation("ExperienceDuties");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Language.Language", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Language.LanguageLevel", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("Core.Entities.UserDependent.Skill.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
